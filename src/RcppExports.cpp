// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getMatrixFore
arma::mat getMatrixFore(const arma::vec& f, const int& k2, const int& h);
RcppExport SEXP _odpc_getMatrixFore(SEXP fSEXP, SEXP k2SEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const int& >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< const int& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(getMatrixFore(f, k2, h));
    return rcpp_result_gen;
END_RCPP
}
// getMatrixFitted
arma::mat getMatrixFitted(const arma::vec& f, const int& k1, const int& k2);
RcppExport SEXP _odpc_getMatrixFitted(SEXP fSEXP, SEXP k1SEXP, SEXP k2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type f(fSEXP);
    Rcpp::traits::input_parameter< const int& >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< const int& >::type k2(k2SEXP);
    rcpp_result_gen = Rcpp::wrap(getMatrixFitted(f, k1, k2));
    return rcpp_result_gen;
END_RCPP
}
// getFini_forecast
arma::mat getFini_forecast(const arma::mat& Z, const arma::mat& resp, const int& k1, const int& k2, const arma::uword& num_comp);
RcppExport SEXP _odpc_getFini_forecast(SEXP ZSEXP, SEXP respSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP num_compSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type resp(respSEXP);
    Rcpp::traits::input_parameter< const int& >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< const int& >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type num_comp(num_compSEXP);
    rcpp_result_gen = Rcpp::wrap(getFini_forecast(Z, resp, k1, k2, num_comp));
    return rcpp_result_gen;
END_RCPP
}
// getMSE
double getMSE(const arma::mat& resp, const arma::mat& Fitted);
RcppExport SEXP _odpc_getMSE(SEXP respSEXP, SEXP FittedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type resp(respSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fitted(FittedSEXP);
    rcpp_result_gen = Rcpp::wrap(getMSE(resp, Fitted));
    return rcpp_result_gen;
END_RCPP
}
// odpc_priv
arma::field<arma::mat> odpc_priv(const arma::mat& Z, const arma::mat& resp, const int& k_tot_max, const int& k1, const int& k2, const arma::uword& num_comp, const arma::vec& f_ini, const bool& passf_ini, const double& tol, const int& niter_max, const int& method);
RcppExport SEXP _odpc_odpc_priv(SEXP ZSEXP, SEXP respSEXP, SEXP k_tot_maxSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP num_compSEXP, SEXP f_iniSEXP, SEXP passf_iniSEXP, SEXP tolSEXP, SEXP niter_maxSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type resp(respSEXP);
    Rcpp::traits::input_parameter< const int& >::type k_tot_max(k_tot_maxSEXP);
    Rcpp::traits::input_parameter< const int& >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< const int& >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type num_comp(num_compSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type f_ini(f_iniSEXP);
    Rcpp::traits::input_parameter< const bool& >::type passf_ini(passf_iniSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type niter_max(niter_maxSEXP);
    Rcpp::traits::input_parameter< const int& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(odpc_priv(Z, resp, k_tot_max, k1, k2, num_comp, f_ini, passf_ini, tol, niter_max, method));
    return rcpp_result_gen;
END_RCPP
}
// roll_odpc
arma::field<arma::field<arma::mat> > roll_odpc(const arma::field<arma::mat>& data_field, const arma::field<arma::mat>& response_field, const arma::uword& k, const arma::uword& k_tot_max, const arma::uword& num_comp, const int& window_size, const double& tol, const int& niter_max, const int& method, const arma::uword& ncores);
RcppExport SEXP _odpc_roll_odpc(SEXP data_fieldSEXP, SEXP response_fieldSEXP, SEXP kSEXP, SEXP k_tot_maxSEXP, SEXP num_compSEXP, SEXP window_sizeSEXP, SEXP tolSEXP, SEXP niter_maxSEXP, SEXP methodSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type data_field(data_fieldSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type response_field(response_fieldSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type k_tot_max(k_tot_maxSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type num_comp(num_compSEXP);
    Rcpp::traits::input_parameter< const int& >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type niter_max(niter_maxSEXP);
    Rcpp::traits::input_parameter< const int& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_odpc(data_field, response_field, k, k_tot_max, num_comp, window_size, tol, niter_max, method, ncores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_odpc_getMatrixFore", (DL_FUNC) &_odpc_getMatrixFore, 3},
    {"_odpc_getMatrixFitted", (DL_FUNC) &_odpc_getMatrixFitted, 3},
    {"_odpc_getFini_forecast", (DL_FUNC) &_odpc_getFini_forecast, 5},
    {"_odpc_getMSE", (DL_FUNC) &_odpc_getMSE, 2},
    {"_odpc_odpc_priv", (DL_FUNC) &_odpc_odpc_priv, 11},
    {"_odpc_roll_odpc", (DL_FUNC) &_odpc_roll_odpc, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_odpc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
